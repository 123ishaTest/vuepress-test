"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[50],{9579:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4dd2875e",path:"/docs/tools/loot-tables.html",title:"Loot Tables",lang:"en-US",frontmatter:{id:"loot-tables",title:"Loot Tables"},excerpt:"",headers:[{level:2,title:"Requirements",slug:"requirements",children:[]},{level:2,title:"Usage",slug:"usage",children:[]},{level:2,title:"Implementation",slug:"implementation",children:[]},{level:2,title:"See also",slug:"see-also",children:[]}],filePathRelative:"docs/tools/loot-tables.md",git:{updatedTime:1633465343e3,contributors:[{name:"Isha",email:"ishadijcks@gmail.com",commits:1}]}}},7346:(n,s,a)=>{a.r(s),a.d(s,{default:()=>O});var t=a(6252);const e=(0,t.Uk)("Loot Tables are very useful. You can use them for monster drop tables, opening card packs in a CCG, "),p=(0,t._)("s",null,"or cash out and sell loot boxes",-1),o=(0,t.Uk)(". The "),l=(0,t._)("code",null,"LootTable",-1),c=(0,t.Uk)(" allows you to combine different rewards. So you can gain a "),u=(0,t.Uk)("Key Item"),r=(0,t.Uk)(" or a "),i=(0,t.Uk)("Currency"),k=(0,t.Uk)(" from the same table."),m=(0,t._)("p",null,[(0,t.Uk)("In the demo application, all "),(0,t._)("code",null,"LootTable"),(0,t.Uk)("s are store in a "),(0,t._)("code",null,"Feature"),(0,t.Uk)(". This is not strictly necessary, but it's the easiest way to inject features into them and reuse tables.")],-1),b=(0,t._)("h2",{id:"requirements",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#requirements","aria-hidden":"true"},"#"),(0,t.Uk)(" Requirements")],-1),d=(0,t._)("li",null,"View possible rewards before rolling",-1),y=(0,t._)("li",null,"View rewards after rolling",-1),h=(0,t._)("li",null,"Roll on other tables",-1),w=(0,t._)("li",null,"Easily create new reward types",-1),g=(0,t.Uk)("Lock drops behind "),I=(0,t.Uk)("Requirements"),f=(0,t.uE)('<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Create a new loot table</span>\n<span class="token keyword">const</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LootTable</span><span class="token punctuation">(</span>LootTableId<span class="token punctuation">.</span>Example<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token comment">// Always</span>\n    <span class="token keyword">new</span> <span class="token class-name">CurrencyEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntRange</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token comment">// One Of</span>\n    <span class="token keyword">new</span> <span class="token class-name">InventoryItemEntry</span><span class="token punctuation">(</span>itemList<span class="token punctuation">[</span>ItemId<span class="token punctuation">.</span>RawFish<span class="token punctuation">]</span><span class="token punctuation">,</span> inventory<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntRange</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">InventoryItemEntry</span><span class="token punctuation">(</span>itemList<span class="token punctuation">[</span>ItemId<span class="token punctuation">.</span>CookedFish<span class="token punctuation">]</span><span class="token punctuation">,</span> inventory<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token comment">// Any Of</span>\n    <span class="token keyword">new</span> <span class="token class-name">KeyItemEntry</span><span class="token punctuation">(</span>keyItems<span class="token punctuation">.</span><span class="token function">getKeyItem</span><span class="token punctuation">(</span>KeyItemId<span class="token punctuation">.</span>Item1<span class="token punctuation">)</span><span class="token punctuation">,</span> keyItems<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">TableEntry</span><span class="token punctuation">(</span>LootTableId<span class="token punctuation">.</span>Example<span class="token punctuation">,</span> lootTables<span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">InventoryItemEntry</span><span class="token punctuation">(</span>itemList<span class="token punctuation">[</span>ItemId<span class="token punctuation">.</span>MoneyPouch<span class="token punctuation">]</span><span class="token punctuation">,</span> inventory<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntRange</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\ntable<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// AbstractLoot[], already applied</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>If we need to create a custom <code>Loot</code> type, we need to extend the <code>AbstractEntry</code>, which is a part of the table. And we have to extend the <code>AbstractLoot</code>, which is the actual reward that can be applied.</p>',4),_=(0,t.Uk)("In this example we will implement loot that gains a "),v=(0,t.Uk)("Key Item"),L=(0,t.Uk)("."),U=(0,t.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">KeyItemEntry</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLootEntry</span> <span class="token punctuation">{</span>\n    _keyItems<span class="token operator">:</span> KeyItems<span class="token punctuation">;</span>\n    item<span class="token operator">:</span> KeyItem<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>item<span class="token operator">:</span> KeyItem<span class="token punctuation">,</span> KeyItems<span class="token operator">:</span> KeyItems<span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> requirement<span class="token operator">:</span> Requirement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> item<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_keyItems <span class="token operator">=</span> KeyItems<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getLoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> KeyItemLoot<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">canGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyItems<span class="token punctuation">.</span><span class="token function">hasKeyItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">KeyItemLoot</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_keyItems<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">KeyItemLoot</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoot</span> <span class="token punctuation">{</span>\n    loot<span class="token operator">:</span> KeyItem<span class="token punctuation">;</span>\n    _keyItems<span class="token operator">:</span> KeyItems<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>loot<span class="token operator">:</span> KeyItem<span class="token punctuation">,</span> keyItems<span class="token operator">:</span> KeyItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>loot <span class="token operator">=</span> loot<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_keyItems <span class="token operator">=</span> keyItems<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Actually award the loot-tables\n     */</span>\n    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_keyItems<span class="token punctuation">.</span><span class="token function">gainKeyItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loot<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Override to implement comparisons. Used for simplifying the list of loot\n     */</span>\n    <span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token operator">:</span> AbstractLoot<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">KeyItemLoot</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>loot<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loot<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See also</h2>',3),K={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/loot-tables/LootTable.ts",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("src/ig-template/tools/loot-tables/LootTable.ts"),x={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/loot-tables/rewards/IgtLoot.ts",target:"_blank",rel:"noopener noreferrer"},E=(0,t.Uk)("src/ig-template/tools/loot-tables/rewards/IgtLoot.ts"),R={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/loot-tables/entries/IgtLootEntry.ts",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Uk)("src/ig-template/tools/loot-tables/entries/IgtLootEntry.ts"),A={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/loot-tables/entries/TableEntry.ts",target:"_blank",rel:"noopener noreferrer"},C=(0,t.Uk)("src/ig-template/tools/loot-tables/entries/TableEntry.ts"),W={},O=(0,a(3744).Z)(W,[["render",function(n,s){const a=(0,t.up)("RouterLink"),W=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("p",null,[e,p,o,l,c,(0,t.Wm)(a,{to:"/docs/features/key-items.html"},{default:(0,t.w5)((()=>[u])),_:1}),r,(0,t.Wm)(a,{to:"/docs/features/wallet.html"},{default:(0,t.w5)((()=>[i])),_:1}),k]),m,b,(0,t._)("ul",null,[d,y,h,w,(0,t._)("li",null,[g,(0,t.Wm)(a,{to:"/docs/tools/requirements.html"},{default:(0,t.w5)((()=>[I])),_:1})])]),f,(0,t._)("p",null,[_,(0,t.Wm)(a,{to:"/docs/features/key-items.html"},{default:(0,t.w5)((()=>[v])),_:1}),L]),U,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",K,[T,(0,t.Wm)(W)])]),(0,t._)("li",null,[(0,t._)("a",x,[E,(0,t.Wm)(W)])]),(0,t._)("li",null,[(0,t._)("a",R,[q,(0,t.Wm)(W)])]),(0,t._)("li",null,[(0,t._)("a",A,[C,(0,t.Wm)(W)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);