"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[617],{6509:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-10f03c70",path:"/docs/tools/items.html",title:"Items",lang:"en-US",frontmatter:{id:"items",title:"Items"},excerpt:"",headers:[{level:2,title:"Requirements",slug:"requirements",children:[]},{level:2,title:"Implementation",slug:"implementation",children:[]},{level:2,title:"See also",slug:"see-also",children:[]}],filePathRelative:"docs/tools/items.md",git:{updatedTime:1633465343e3,contributors:[{name:"Isha",email:"ishadijcks@gmail.com",commits:1}]}}},6951:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var t=a(6252);const e=(0,t._)("code",null,"Items",-1),p=(0,t.Uk)(" can be a big part of your game. If you're making an RPG-like game, all your weapons and ores can be implemented as items. You are able to create new items by extending the "),o=(0,t._)("code",null,"AbstractItem",-1),c=(0,t.Uk)(" class, and it will work perfectly with the "),l=(0,t.Uk)("Inventory"),u=(0,t.Uk)(" and "),r=(0,t.Uk)("ItemList"),i=(0,t.Uk)("."),k=(0,t.uE)('<h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><ul><li>Easily implement custom items</li></ul><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>An <code>AbstractItem</code> is simply a dataclass, but it allows us to implement custom behaviour easily.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractItem</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    id<span class="token operator">:</span> ItemId<span class="token punctuation">;</span>\n    type<span class="token operator">:</span> ItemType<span class="token punctuation">;</span>\n    description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    maxStack<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Let&#39;s say we want a <code>Consumable</code> item. That can be used once to gain some benefit:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConsumable</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractItem</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * What will be shown on the consume button\n     */</span>\n    <span class="token keyword">abstract</span> consumeLabel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">protected</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> id<span class="token operator">:</span> ItemId<span class="token punctuation">,</span> type<span class="token operator">:</span> ItemType<span class="token punctuation">,</span> maxStack<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> description<span class="token punctuation">,</span> id<span class="token punctuation">,</span> type<span class="token punctuation">,</span> maxStack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * What to do when this item is consumed.\n     */</span>\n    <span class="token keyword">abstract</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * NOTE: your consumables can probably do something more clever here.\n     * Make sure to override this method as needed.\n     */</span>\n    <span class="token function">consumeMultiple</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">abstract</span> <span class="token function">canConsume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>And now the real work, and actual item that can be consumed. The Money Pouch. When opened, it gives 10 Money when opened.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPouch</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConsumable</span> <span class="token punctuation">{</span>\n    consumeLabel<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Open&quot;</span><span class="token punctuation">;</span>\n    _wallet<span class="token operator">:</span> Wallet<span class="token punctuation">;</span>\n\n    moneyToGain<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> Wallet<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Money Pouch&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Open for some coins&#39;</span><span class="token punctuation">,</span> ItemId<span class="token punctuation">.</span>MoneyPouch<span class="token punctuation">,</span> ItemType<span class="token punctuation">.</span>Consumable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_wallet <span class="token operator">=</span> wallet<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">canConsume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_wallet<span class="token punctuation">.</span><span class="token function">gainCurrency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>moneyToGain<span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">consumeMultiple</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_wallet<span class="token punctuation">.</span><span class="token function">gainCurrency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>moneyToGain <span class="token operator">*</span> amount<span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>You can also store custom data with each item. For example the amount of stones in a slingshot. This can be done by overriding the <code>save()</code> and <code>load()</code> methods.</p><div class="custom-container warning"><p class="custom-container-title">If an item has custom data, you should probably set its `maxStack` to 1 to avoid duplication.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ItemWithData</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractItem</span> <span class="token punctuation">{</span>\n    customData<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>customData<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Item with data&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This custom data is also saved</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> ItemId<span class="token punctuation">.</span>ItemWithData<span class="token punctuation">,</span> ItemType<span class="token punctuation">.</span>Default<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>customData <span class="token operator">=</span> customData<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> object <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            customData<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customData\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">load</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>customData <span class="token operator">=</span> data<span class="token punctuation">.</span>customData <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customData<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This custom data is also saved. It is now (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>customData<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See also</h2>',13),m={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/features/items/AbstractItem.ts",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Uk)("src/ig-template/features/items/AbstractItem.ts"),d={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/features/items/AbstractConsumable.ts",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("src/ig-template/features/items/AbstractConsumable.ts"),h={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/features/items/instances/AbstractDataItem.ts",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("src/ig-template/features/items/instances/AbstractDataItem.ts"),g={},f=(0,a(3744).Z)(g,[["render",function(n,s){const a=(0,t.up)("RouterLink"),g=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[(0,t._)("p",null,[e,p,o,c,(0,t.Wm)(a,{to:"/docs/features/inventory.html"},{default:(0,t.w5)((()=>[l])),_:1}),u,(0,t.Wm)(a,{to:"/docs/features/item-list.html"},{default:(0,t.w5)((()=>[r])),_:1}),i]),k,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",m,[b,(0,t.Wm)(g)])]),(0,t._)("li",null,[(0,t._)("a",d,[y,(0,t.Wm)(g)])]),(0,t._)("li",null,[(0,t._)("a",h,[w,(0,t.Wm)(g)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);