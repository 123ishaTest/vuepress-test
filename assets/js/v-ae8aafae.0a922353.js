"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[758],{3280:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ae8aafae",path:"/docs/features/wallet.html",title:"Wallet",lang:"en-US",frontmatter:{id:"wallet",title:"Wallet"},excerpt:"",headers:[{level:2,title:"Requirements",slug:"requirements",children:[]},{level:2,title:"Usage",slug:"usage",children:[]},{level:2,title:"Implementation",slug:"implementation",children:[{level:3,title:"Multipliers",slug:"multipliers",children:[]},{level:3,title:"Saving and Loading",slug:"saving-and-loading",children:[]},{level:3,title:"Events",slug:"events",children:[]}]},{level:2,title:"See also",slug:"see-also",children:[]}],filePathRelative:"docs/features/wallet.md",git:{updatedTime:1633465343e3,contributors:[{name:"Isha",email:"ishadijcks@gmail.com",commits:1}]}}},5501:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(6252);const e=(0,p.uE)('<p>One of the first features I like to design in any language is the <code>Wallet</code>. Its main purpose is to store and save currencies. It should also be able to check if the player can afford something or not.</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><ul><li>Store currencies</li><li>Select which currencies can be stored</li><li>Check if the player can afford something</li><li>Emit an event when currency is gained</li><li>Apply currency multipliers if applicable</li><li>Easily extendable with more currencies</li><li>Save &amp; Load</li></ul><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IgtWallet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nwallet<span class="token punctuation">.</span><span class="token function">gainCurrency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wallet<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\n\nwallet<span class="token punctuation">.</span><span class="token function">setCurrencyMultiplier</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">;</span>\nwallet<span class="token punctuation">.</span><span class="token function">gainCurrency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wallet<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wallet<span class="token punctuation">.</span><span class="token function">hasCurrency</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> couldAfford <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">payIfPossible</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>couldAfford<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\ncouldAfford <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">payIfPossible</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Currency</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>couldAfford<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wallet<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>To avoid making typos regarding currencies, we declare an enum <code>CurrencyType</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> CurrencyType <span class="token punctuation">{</span>\n    Money <span class="token operator">=</span> <span class="token string">&quot;Money&quot;</span><span class="token punctuation">,</span>\n    Secondary <span class="token operator">=</span> <span class="token string">&quot;Secondary&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Currency</code> then simply becomes</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Currency</span> <span class="token punctuation">{</span>\n    amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    type<span class="token operator">:</span> CurrencyType<span class="token punctuation">;</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> type<span class="token operator">:</span> CurrencyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Whether or not this currency is valid. Your game can have different rules\n     */</span>\n    <span class="token keyword">public</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>The <code>Wallet</code> has to deal with storing the currencies, and check if they are valid</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Wallet</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> _currencies<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n    <span class="token keyword">private</span> _multipliers<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n    <span class="token keyword">private</span> _onCurrencyGain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleEventDispatcher<span class="token operator">&lt;</span>Currency<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> _supportedCurrencies<span class="token operator">:</span> CurrencyType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Gain the specified currency and apply the global multiplier\n     */</span>\n    <span class="token keyword">public</span> <span class="token function">gainCurrency</span><span class="token punctuation">(</span>currency<span class="token operator">:</span> Currency<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        currency<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrencyMultiplier</span><span class="token punctuation">(</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currency<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportsCurrencyType</span><span class="token punctuation">(</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Could not add currency </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>currency<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_onCurrencyGain<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>currency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_currencies<span class="token punctuation">[</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">]</span> <span class="token operator">+=</span> currency<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Return true if the currency is valid and the player has the specified amount.\n     */</span>\n    <span class="token keyword">public</span> <span class="token function">hasCurrency</span><span class="token punctuation">(</span>currency<span class="token operator">:</span> Currency<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportsCurrencyType</span><span class="token punctuation">(</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currencies<span class="token punctuation">[</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> currency<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Remove the currency amount from the specified currency.\n     * IMPORTANT: This method does not care if amounts go negative\n     * <span class="token keyword">@param</span> <span class="token parameter">currency</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token function">loseCurrency</span><span class="token punctuation">(</span>currency<span class="token operator">:</span> Currency<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currency<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">supportsCurrencyType</span><span class="token punctuation">(</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Could not lose currency </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>currency<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_currencies<span class="token punctuation">[</span>currency<span class="token punctuation">.</span>type<span class="token punctuation">]</span> <span class="token operator">-=</span> currency<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Subtracts the specified currency and returns true if the wallet has enough.\n     * Otherwise return false and don&#39;t subtract anything\n     * <span class="token keyword">@param</span> <span class="token parameter">currency</span>\n     * <span class="token keyword">@constructor</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token function">payIfPossible</span><span class="token punctuation">(</span>currency<span class="token operator">:</span> Currency<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasCurrency</span><span class="token punctuation">(</span>currency<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loseCurrency</span><span class="token punctuation">(</span>currency<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h3 id="multipliers" tabindex="-1"><a class="header-anchor" href="#multipliers" aria-hidden="true">#</a> Multipliers</h3><p>To avoid a dependency on <code>App.game</code>, the <code>Wallet</code> internally keeps track of a list of multipliers per <code>CurrencyType</code>. If a <code>Feature</code> changes a multiplier (by for example buying an upgrade), it needs to trigger a recalculation by emitting the <code>onCurrencyMultiplierChange</code> event. <code>App.game</code> will then recalculate this multiplier and update the <code>Wallet</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Wallet</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> _multipliers<span class="token operator">:</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span>CurrencyType<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n\n    <span class="token keyword">public</span> <span class="token function">getCurrencyMultiplier</span><span class="token punctuation">(</span>type<span class="token operator">:</span> CurrencyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_multipliers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token function">setCurrencyMultiplier</span><span class="token punctuation">(</span>multiplier<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> type<span class="token operator">:</span> CurrencyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>_multipliers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> multiplier<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="saving-and-loading" tabindex="-1"><a class="header-anchor" href="#saving-and-loading" aria-hidden="true">#</a> Saving and Loading</h3><p>Saving now becomes very straightforward. We only need to add each currency to the <code>WalletSaveData</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// WalletSaveData.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WalletSaveData</span> <span class="token keyword">extends</span> <span class="token class-name">SaveData</span> <span class="token punctuation">{</span>\n    money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    secondary<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Wallet.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Wallet</span> <span class="token keyword">extends</span> <span class="token class-name">Feature</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> WalletSaveData <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            money<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">]</span><span class="token punctuation">,</span>\n            secondary<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Secondary<span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token function">load</span><span class="token punctuation">(</span>data<span class="token operator">:</span> WalletSaveData<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>money <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Money<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Secondary<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>secondary <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currencies<span class="token punctuation">[</span>CurrencyType<span class="token punctuation">.</span>Secondary<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Info</p><p>You might think that declaring the currencies 3 times just to save them is a bit excessive. It is possible to simply return <code>currencies</code> and save that. This does however leave you with a bit less control when modifying saves as TS can&#39;t tell which attributes exist. It&#39;s up to you!</p></div><h3 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h3><h4 id="oncurrencygain" tabindex="-1"><a class="header-anchor" href="#oncurrencygain" aria-hidden="true">#</a> onCurrencyGain</h4><p>Emitted whenever a currency is gained.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>App<span class="token punctuation">.</span>game<span class="token punctuation">.</span>features<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span>onCurrencyGain<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>currency <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;We gained&quot;</span><span class="token punctuation">,</span> currency<span class="token punctuation">.</span>amount<span class="token punctuation">,</span> currency<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See also</h2>',24),t={href:"https://github.com/123ishaTest/igt-library/tree/master/src/ig-template/features/wallet",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("src/ig-template/features/wallet"),o={},l=(0,a(3744).Z)(o,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",t,[c,(0,p.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);