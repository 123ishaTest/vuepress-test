"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[926],{5676:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-545356b4",path:"/docs/tools/exp-level.html",title:"ExpLevel",lang:"en-US",frontmatter:{id:"exp-level",title:"ExpLevel"},excerpt:"",headers:[{level:2,title:"Requirements",slug:"requirements",children:[]},{level:2,title:"Usage",slug:"usage",children:[]},{level:2,title:"See also",slug:"see-also",children:[]}],filePathRelative:"docs/tools/exp-level.md",git:{updatedTime:1633465343e3,contributors:[{name:"Isha",email:"ishadijcks@gmail.com",commits:1}]}}},9167:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(6252);const t=(0,e.uE)('<p>Incremental games often use something that can be leveled up. It could be an RPG-like skill that provides bonuses based on the level. Or an item that can be leveled up five times.</p><p>This tool allows you to easily add such functionality by providing exp needed per level!</p><h2 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h2><ul><li>Support exp functions as well as hardcoded values</li><li>Get the progress to the next level to display it</li></ul><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Create a skill based on a hardcoded list of exp required.</span>\n<span class="token keyword">const</span> maxLevel <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> expPerLevel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> skill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscreteExpLevel</span><span class="token punctuation">(</span>maxLevel<span class="token punctuation">,</span> expPerLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nskill<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nskill<span class="token punctuation">.</span><span class="token function">gainExperience</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nskill<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n\nskill<span class="token punctuation">.</span><span class="token function">gainExperience</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nskill<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n\n<span class="token comment">// Or use a custom function instead!</span>\n<span class="token keyword">function</span> <span class="token function">levelFunction</span><span class="token punctuation">(</span>level<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> anotherSkill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContinuousExpLevel</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> levelFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\nanotherSkill<span class="token punctuation">.</span><span class="token function">getExpNeededForLevel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\nanotherSkill<span class="token punctuation">.</span><span class="token function">gainExperience</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nanotherSkill<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See also</h2>',7),p={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/exp-level/IgtExpLevel.ts",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("src/ig-template/tools/exp-level/IgtExpLevel.ts"),o={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/exp-level/DiscreteExpLevel.ts",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("src/ig-template/tools/exp-level/DiscreteExpLevel.ts"),u={href:"https://github.com/123ishaTest/igt-library/blob/master/src/ig-template/tools/exp-level/ContinuousExpLevel.ts",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("src/ig-template/tools/exp-level/ContinuousExpLevel.ts"),r={},k=(0,a(3744).Z)(r,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",p,[l,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",o,[c,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",u,[i,(0,e.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);